const express = require('express');
const bodyParser = require('body-parser');
const https = require('https');

let paymentStatus;
let amountPaid;
let paymentDate;
let transactionSummary;

const app = express();

app.use(bodyParser.urlencoded({ extended: true }));

app.post('/', (req, res) => {
  // IPN data received from PayPal
  const ipnData = req.body;

  // Send the received IPN data back to PayPal for validation
  const options = {
    hostname: 'ipnpb.paypal.com',
    path: '/cgi-bin/webscr',
    method: 'POST',
  };

  const request = https.request(options, (paypalRes) => {
    let responseData = '';

    paypalRes.on('data', (chunk) => {
      responseData += chunk;
    });

    paypalRes.on('end', () => {
      if (responseData.trim() === 'VERIFIED') {
        // IPN data is verified, display ipnData to console.
        console.log('Verified IPN data:', ipnData);
      } else {
        // IPN data is invalid.
        console.error('Invalid IPN data:', ipnData);
      }
    });
  });

  // Parse important details from the ipnData.
  payStatus = ipnData.payment_status;
  paymentStatus = JSON.stringify(ipnData.payment_status, null, 2);
  amountPaid = JSON.stringify(ipnData.mc_gross, null, 2);
  paymentDate = JSON.stringify(ipnData.payment_date, null, 2);
  transactionSummary = paymentStatus + " " + amountPaid + " " + paymentDate;

  // Display parsed details to the console.
  if (payStatus === 'Completed') {
    console.log('Payment Status: Completed');
    console.log('Amount Paid: ' + amountPaid);
    console.log('Payment Date: ' + paymentDate);
  } else {
    console.log('Payment Status: ' + paymentStatus); // Display paymentStatus if it is not 'Completed'.
  }

  // Send the IPN data back to PayPal
  request.write('cmd=_notify-validate&' + Object.keys(ipnData).map(key => `${key}=${ipnData[key]}`).join('&'));
  request.end();

  res.status(200).send('IPN Received');

});

// Handle GET requests for the root URL ("/")
app.get('/', (req, res) => {
  res.send(transactionSummary);
});

const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});